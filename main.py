import sympy as sp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, CallbackContext
from openai import OpenAI
from flask import Flask
import threading

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TELEGRAM_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI —á–µ—Ä–µ–∑ AITUNNEL
client = OpenAI(
    api_key="YOUR_OPENAI_API_KEY",
    base_url="https://api.aitunnel.ru/v1/",
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_expressions = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
def solve_math_problem(problem: str):
    try:
        expr = sp.sympify(problem)
        result = sp.N(expr)

        if result == int(result):
            result = int(result)
        else:
            result = round(result, 10)

        result_str = str(result).rstrip('0').rstrip('.') if '.' in str(result) else str(result)
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_str}"
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(update: Update, context: CallbackContext):
    keyboard = [[InlineKeyboardButton("–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏", callback_data='math')],
                [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data='other')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_click(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if query.data == "math":
        keyboard = [[InlineKeyboardButton("7", callback_data='7'), InlineKeyboardButton("8", callback_data='8'), InlineKeyboardButton("9", callback_data='9')],
                    [InlineKeyboardButton("4", callback_data='4'), InlineKeyboardButton("5", callback_data='5'), InlineKeyboardButton("6", callback_data='6')],
                    [InlineKeyboardButton("1", callback_data='1'), InlineKeyboardButton("2", callback_data='2'), InlineKeyboardButton("3", callback_data='3')],
                    [InlineKeyboardButton("0", callback_data='0'), InlineKeyboardButton("+", callback_data='+'), InlineKeyboardButton("-", callback_data='-')],
                    [InlineKeyboardButton("*", callback_data='*'), InlineKeyboardButton("/", callback_data='/')],
                    [InlineKeyboardButton("=", callback_data='solve'), InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å", callback_data='clear')],
                    [InlineKeyboardButton("–í—ã—á–∏—Å–ª–∏—Ç—å –∫–æ—Ä–µ–Ω—å", callback_data='sqrt')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        user_expressions[user_id] = ""
        await query.message.reply_text("–°–æ—Å—Ç–∞–≤—å—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫:", reply_markup=reply_markup)
    elif query.data == "other":
        await query.message.reply_text("–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å!")
    elif query.data == "sqrt":
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –∫–æ—Ä–µ–Ω—å:")
    else:
        user_expression = user_expressions.get(user_id, "")
        if query.data == "solve":
            answer = solve_math_problem(user_expression)
            await query.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {answer}")
            user_expressions[user_id] = ""
        elif query.data == "clear":
            user_expressions[user_id] = ""
            await query.message.reply_text("–í—ã—Ä–∞–∂–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        else:
            user_expressions[user_id] += query.data
        await query.message.edit_text(f"–¢–µ–∫—É—â–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {user_expressions[user_id]}", reply_markup=query.message.reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext):
    user_message = update.message.text

    if user_message.lower() in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "—Ö–∞–π"]:
        await start_command(update, context)
        return

    try:
        number = float(user_message)
        sqrt_result = sp.sqrt(number)
        result = sp.N(sqrt_result)
        result_str = str(result).rstrip('0').rstrip('.') if '.' in str(result) else str(result)
        await update.message.reply_text(f"–ö–æ—Ä–µ–Ω—å —á–∏—Å–ª–∞ {number} —Ä–∞–≤–µ–Ω: {result_str}")
        return
    except ValueError:
        pass

    if any(char in user_message for char in ['+', '-', '*', '/', '^', '(', ')', '=', 'x', 'y', 'z']):
        answer = solve_math_problem(user_message)
        if answer:
            await update.message.reply_text(f"üî¢ {answer}")
            return

    try:
        completion = client.chat.completions.create(
            messages=[{"role": "user", "content": user_message}],
            max_tokens=1000,
            model="gpt-4"
        )
        bot_response = completion.choices[0].message.content
    except Exception as e:
        bot_response = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
    
    await update.message.reply_text(bot_response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start_command))  # –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
    application.add_handler(CallbackQueryHandler(button_click))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

# –ó–∞–ø—É—Å–∫ Flask –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞
app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    app.run(host="0.0.0.0", port=10000)

if __name__ == '__main__':
    threading.Thread(target=run_flask).start()
    main()
    main()  # –î—É–±–ª–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ main() –æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É