import sympy as sp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, CallbackContext
from openai import OpenAI
import os
from flask import Flask
import threading

TELEGRAM_TOKEN = "7649909820:AAG_ofyeA__Q6iLHWl1WQaFuiS6iaUhxW3Q"
client = OpenAI(
    api_key="sk-aitunnel-ynPRiPL0SFNxo2Gm1YkgWbjGsxVIdgEy",
    base_url="https://api.aitunnel.ru/v1/",
)

user_expressions = {}

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
def back_button():
    return [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìä –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏", callback_data='math')],
        [InlineKeyboardButton("üñº –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data='image')],
        [InlineKeyboardButton("üîä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å (TTS)", callback_data='speech')],
        [InlineKeyboardButton("ü§ñ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫", callback_data='other')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
def get_calculator_keyboard():
    keyboard = [
        [InlineKeyboardButton("7", callback_data='7'), InlineKeyboardButton("8", callback_data='8'), InlineKeyboardButton("9", callback_data='9')],
        [InlineKeyboardButton("4", callback_data='4'), InlineKeyboardButton("5", callback_data='5'), InlineKeyboardButton("6", callback_data='6')],
        [InlineKeyboardButton("1", callback_data='1'), InlineKeyboardButton("2", callback_data='2'), InlineKeyboardButton("3", callback_data='3')],
        [InlineKeyboardButton("0", callback_data='0'), InlineKeyboardButton("+", callback_data='+'), InlineKeyboardButton("-", callback_data='-')],
        [InlineKeyboardButton("*", callback_data='*'), InlineKeyboardButton("/", callback_data='/'), InlineKeyboardButton("‚àö", callback_data='sqrt')],
        [InlineKeyboardButton("=", callback_data='solve'), InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å", callback_data='clear')],
        back_button()
    ]
    return InlineKeyboardMarkup(keyboard)

def get_simple_keyboard():
    return InlineKeyboardMarkup([back_button()])

# –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞
def solve_math_problem(problem: str):
    try:
        expr = sp.sympify(problem)
        result = sp.N(expr)
        result = int(result) if result == int(result) else round(result, 10)
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {str(result).rstrip('0').rstrip('.') if '.' in str(result) else result}"
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

# /start
async def start_command(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_click(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    def edit(text, reply_markup):
        try:
            return context.bot.edit_message_text(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id,
                text=text,
                reply_markup=reply_markup
            )
        except Exception as e:
            return query.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

    data = query.data

    if data == "math":
        user_expressions[user_id] = {"expression": "", "message_id": query.message.message_id}
        await edit("–°–æ—Å—Ç–∞–≤—å—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫:", get_calculator_keyboard())

    elif data == "image":
        user_expressions[user_id] = "image"
        await edit("üñº –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", get_simple_keyboard())

    elif data == "speech":
        user_expressions[user_id] = "speech"
        await edit("üîä –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏:", get_simple_keyboard())

    elif data == "other":
        user_expressions[user_id] = "other"
        await edit("‚ùì –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å:", get_simple_keyboard())

    elif data == "clear":
        if user_id not in user_expressions or not isinstance(user_expressions[user_id], dict):
            user_expressions[user_id] = {"expression": "", "message_id": query.message.message_id}
        else:
            user_expressions[user_id]["expression"] = ""
        await edit("–¢–µ–∫—É—â–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ", get_calculator_keyboard())

    elif data == "solve":
        expr = user_expressions.get(user_id, {}).get("expression", "")
        if expr:
            result = solve_math_problem(expr)
            user_expressions[user_id]["expression"] = ""
            await edit(f"–¢–µ–∫—É—â–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {expr}\n{result}", get_calculator_keyboard())
        else:
            await edit("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.", get_calculator_keyboard())

    elif data == "sqrt":
        expr = user_expressions.get(user_id, {}).get("expression", "")
        if expr:
            try:
                num = float(expr)
                if num < 0:
                    result = "–û—à–∏–±–∫–∞: –Ω–µ–ª—å–∑—è –∏–∑–≤–ª–µ—á—å –∫–æ—Ä–µ–Ω—å –∏–∑ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞."
                else:
                    result = str(sp.N(sp.sqrt(num))).rstrip('0').rstrip('.')
                    result = f"‚àö{expr} = {result}"
                user_expressions[user_id]["expression"] = ""
                await edit(result, get_calculator_keyboard())
            except Exception as e:
                await edit(f"–û—à–∏–±–∫–∞: {e}", get_calculator_keyboard())
        else:
            await edit("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ—Ä–Ω—è.", get_calculator_keyboard())

    elif data == "back_to_main":
        user_expressions[user_id] = {}
        await edit("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", get_main_keyboard())

    else:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        if user_id not in user_expressions or not isinstance(user_expressions[user_id], dict):
            user_expressions[user_id] = {"expression": data, "message_id": query.message.message_id}
        else:
            user_expressions[user_id]["expression"] += data
        await edit(f"–¢–µ–∫—É—â–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {user_expressions[user_id]['expression']}", get_calculator_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_message = update.message.text
    state = user_expressions.get(user_id, "other")

    if state == "image":
        try:
            image_res = client.images.generate(
                model="dall-e-3",
                size="1024x1024",
                quality="standard",
                prompt=user_message
            )
            image_url = image_res.data[0].url
            await update.message.reply_photo(photo=image_url, caption="–í–æ—Ç –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!", reply_markup=get_simple_keyboard())
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}", reply_markup=get_simple_keyboard())

    elif state == "speech":
        try:
            response = client.audio.speech.create(
                model="tts-1",
                input=user_message,
                voice="alloy"
            )
            speech_file = "speech.mp3"
            with open(speech_file, "wb") as f:
                f.write(response.content)
            await update.message.reply_voice(voice=open(speech_file, "rb"), reply_markup=get_simple_keyboard())
            os.remove(speech_file)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}", reply_markup=get_simple_keyboard())

    elif state == "other":
        try:
            completion = client.chat.completions.create(
                messages=[{"role": "user", "content": user_message}],
                max_tokens=1000,
                model="gpt-4"
            )
            bot_response = completion.choices[0].message.content
        except Exception as e:
            bot_response = f"–û—à–∏–±–∫–∞: {e}"
        await update.message.reply_text(bot_response, reply_markup=get_simple_keyboard())

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞.")

# Flask –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞
app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    app.run(host="0.0.0.0", port=10000)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CallbackQueryHandler(button_click))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

if __name__ == "__main__":
    threading.Thread(target=run_flask).start()
    main()
