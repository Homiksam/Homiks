import os
import sympy as sp
from flask import Flask
from telegram import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton, Update
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from openai import OpenAI
import threading

TELEGRAM_TOKEN = "7649909820:AAG_ofyeA__Q6iLHWl1WQaFuiS6iaUhxW3Q"

client = OpenAI(
    api_key="sk-aitunnel-ynPRiPL0SFNxo2Gm1YkgWbjGsxVIdgEy",
    base_url="https://api.aitunnel.ru/v1/",
)

user_states = {}

def get_main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="math")],
        [InlineKeyboardButton("üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image")],
        [InlineKeyboardButton("üîä –û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="speech")],
        [InlineKeyboardButton("ü§ñ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫", callback_data="other")],
    ]
    return InlineKeyboardMarkup(keyboard)

def back_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]])

def get_main_menu_button():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]])

def get_persistent_keyboard():
    keyboard = [[KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_calculator_keyboard():
    keyboard = [
        [InlineKeyboardButton("7", callback_data='7'), InlineKeyboardButton("8", callback_data='8'), InlineKeyboardButton("9", callback_data='9')],
        [InlineKeyboardButton("4", callback_data='4'), InlineKeyboardButton("5", callback_data='5'), InlineKeyboardButton("6", callback_data='6')],
        [InlineKeyboardButton("1", callback_data='1'), InlineKeyboardButton("2", callback_data='2'), InlineKeyboardButton("3", callback_data='3')],
        [InlineKeyboardButton("0", callback_data='0'), InlineKeyboardButton("+", callback_data='+'), InlineKeyboardButton("-", callback_data='-')],
        [InlineKeyboardButton("*", callback_data='*'), InlineKeyboardButton("/", callback_data='/'), InlineKeyboardButton("‚àö", callback_data='sqrt')],
        [InlineKeyboardButton("=", callback_data='solve'), InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å", callback_data='clear')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=get_persistent_keyboard())
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data == "back_to_main":
        user_states[user_id] = None
        await query.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

    elif data == "math":
        user_states[user_id] = {"mode": "math", "expression": ""}
        await query.message.reply_text("–°–æ–±–µ—Ä–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫:", reply_markup=get_calculator_keyboard())

    elif data in ("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "+", "-", "*", "/", "(", ")"):
        if user_states.get(user_id, {}).get("mode") == "math":
            user_states[user_id]["expression"] += data
            await query.message.edit_text(f"–í—ã—Ä–∞–∂–µ–Ω–∏–µ: {user_states[user_id]['expression']}", reply_markup=get_calculator_keyboard())

    elif data == "clear":
        if user_states.get(user_id, {}).get("mode") == "math":
            user_states[user_id]["expression"] = ""
            await query.message.edit_text("–í—ã—Ä–∞–∂–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ.", reply_markup=get_calculator_keyboard())

    elif data == "solve":
        expr = user_states.get(user_id, {}).get("expression", "")
        try:
            result = sp.sympify(expr, evaluate=True)
            evaluated = sp.N(result)
            if evaluated == int(evaluated):
                evaluated = int(evaluated)
            else:
                evaluated = round(float(evaluated), 6)
            await query.message.edit_text(f"{expr}={evaluated}", reply_markup=get_calculator_keyboard())
            user_states[user_id]["expression"] = ""
        except Exception as e:
            await query.message.edit_text(f"–û—à–∏–±–∫–∞: {e}", reply_markup=get_calculator_keyboard())

    elif data == "sqrt":
        expr = user_states.get(user_id, {}).get("expression", "")
        try:
            if expr:
                value = float(expr)
                if value < 0:
                    raise ValueError("–ù–µ–ª—å–∑—è –∏–∑–≤–ª–µ—á—å –∫–æ—Ä–µ–Ω—å –∏–∑ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞.")
                result = sp.N(sp.sqrt(value))
                if result == int(result):
                    result = int(result)
                else:
                    result = round(float(result), 6)
                await query.message.edit_text(f"‚àö{expr} = {result}", reply_markup=get_calculator_keyboard())
                user_states[user_id]["expression"] = ""
            else:
                await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ—Ä–Ω—è.", reply_markup=get_calculator_keyboard())
        except Exception as e:
            await query.message.edit_text(f"–û—à–∏–±–∫–∞: {e}", reply_markup=get_calculator_keyboard())

    elif data == "image":
        user_states[user_id] = {"mode": "image"}
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=back_keyboard())

    elif data == "speech":
        user_states[user_id] = {"mode": "speech"}
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏:", reply_markup=back_keyboard())

    elif data == "other":
        user_states[user_id] = {"mode": "other"}
        await query.message.reply_text("–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ò–ò:", reply_markup=back_keyboard())

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_input = update.message.text
    mode = user_states.get(user_id, {}).get("mode")

    if user_input == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        user_states[user_id] = None
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
        return

    if mode == "image":
        try:
            img = client.images.generate(model="dall-e-3", prompt=user_input, size="1024x1024", quality="standard")
            await update.message.reply_photo(photo=img.data[0].url, caption="–í–æ—Ç –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!", reply_markup=get_main_menu_button())
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}", reply_markup=get_main_menu_button())

    elif mode == "speech":
        try:
            response = client.audio.speech.create(
                model="tts-1",
                input=user_input,
                voice="alloy"
            )
            file_path = "speech.mp3"
            with open(file_path, "wb") as f:
                f.write(response.content)
            await update.message.reply_voice(voice=open(file_path, "rb"), reply_markup=get_main_menu_button())
            os.remove(file_path)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}", reply_markup=get_main_menu_button())

    elif mode == "other":
        try:
            chat = client.chat.completions.create(
                model="o1",
                messages=[{"role": "user", "content": user_input}],
                max_tokens=1000
            )
            await update.message.reply_text(chat.choices[0].message.content, reply_markup=get_main_menu_button())
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}", reply_markup=get_main_menu_button())

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

app = Flask(__name__)

@app.route("/")
def home():
    return "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!"

def run_flask():
    app.run(host="0.0.0.0", port=10000)

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    threading.Thread(target=run_flask).start()
    application.run_polling()

if __name__ == "__main__":
    main()
